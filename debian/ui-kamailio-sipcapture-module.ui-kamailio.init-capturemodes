#! /bin/sh
#
### BEGIN INIT INFO
# Provides:          ui-kamailio
# Required-Start:    $syslog $network $remote_fs $time
# Required-Stop:     $syslog $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the Kamailio SIP proxy server
# Description:       Start the Kamailio SIP proxy server
### END INIT INFO
#
# TODO:
# The following fields should be added (and completed):
# Should-Start:      postgresql mysql radius
# Should-Stop:       postgresql mysql radius

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/kamailio
NAME=kamailio
DESC="Kamailio SIP Server"
HOMEDIR=/home/ser
PIDFILE=$HOMEDIR/$NAME.pid
COREDIR=/coredumps
DEFAULTS=/etc/default/ui-kamailio
CFGFILE=/etc/kamailio/kamailio.cfg
RUN_OPENSER=no

# lock file for sp-voipchecker to notice if there is a check in progress
LOCK=/var/run/check_kamailio.lock


#if homer scripts lock file doesn't exist, homer script are probably not running
HOMER_SCRIPTS_INV_LOCK=/var/run/ui-memmove-invite.lock
HOMER_SCRIPTS_REG_LOCK=/var/run/ui-memmove-register.lock

# Do not start kamailio if fork=no is set in the config file
# otherwise the boot process will just stop
check_fork ()
{
    if grep -q "^[[:space:]]*fork[[:space:]]*=[[:space:]]*no.*" /etc/kamailio/kamailio.cfg; then
	echo "Not starting $DESC: fork=no specified in config file; run /etc/init.d/ui-kamailio debug instead"
	exit 0
    fi
}

check_kamailio_config ()
{
	# Check if kamailio configuration is valid before starting the server
	set +e
	out=$($DAEMON -c -f "$CFGFILE" 2>&1 > /dev/null)
	retcode=$?
	set -e
	if [ "$retcode" != '0' ]; then
	    echo "Not starting $DESC: invalid configuration file!"
	    echo -e "\n$out\n"
	    exit 1
	fi
}

create_radius_seqfile ()
{
    # Create a radius sequence file to be used by the radius client if
    # radius accounting is enabled. This is needed to avoid any issue
    # with the file not being writable if kamailio first starts as user
    # root because DUMP_CORE is enabled and creates this file as user
    # root and then later it switches back to user kamailio and cannot
    # write to the file. If the file exists before kamailio starts, it
    # won't change it's ownership and will be writable for both root
    # and kamailio, no matter what options are chosen at install time
    RADIUS_SEQ_FILE=/var/run/kamailio/kamailio_radius.seq
    if [ -d /var/run/kamailio ]; then
	chown ${USER}:${GROUP} /var/run/kamailio

	if [ ! -f $RADIUS_SEQ_FILE ]; then
	    touch $RADIUS_SEQ_FILE
	fi

	chown ${USER}:${GROUP} $RADIUS_SEQ_FILE
	chmod 660 $RADIUS_SEQ_FILE
    fi
}

test -f $DAEMON || exit 0

# Load startup options if available
if [ -f $DEFAULTS ]; then
   . $DEFAULTS || true
fi

if [ "$RUN_OPENSER" != "yes" ]; then
    echo "OpenSER not yet configured. Edit /etc/default/ui-kamailio first."
    exit 0
fi

set -e

MEMORY=$((`echo $MEMORY | sed -e 's/[^0-9]//g'`))
[ -z "$USER" ]  && USER=openser
[ -z "$GROUP" ] && GROUP=openser
[ $MEMORY -le 0 ] && MEMORY=32

if test "$DUMP_CORE" = "yes" ; then
    # set proper ulimit
    ulimit -c unlimited
    set -e
    [ -d $COREDIR ] || mkdir $COREDIR
    chmod 777 $COREDIR
    echo "$COREDIR/core.%e.sig%s.%p" > /proc/sys/kernel/core_pattern
fi

# /var/run can be a tmpfs
if [ ! -d $HOMEDIR ]; then
    mkdir -p $HOMEDIR
fi

OPTIONS="-P $PIDFILE -m $MEMORY -u $USER -g $GROUP -w $HOMEDIR -f $CFGFILE"

case "$1" in
  start|debug)
	check_kamailio_config
	create_radius_seqfile

	if [ "$1" != "debug" ]; then
	    check_fork
	fi
	if [ ! -f $HOMER_SCRIPTS_INV_LOCK ]; then
		echo -ne "homer scripts for INVITE not running"
		exit 1
	fi

	if [ ! -f $HOMER_SCRIPTS_REG_LOCK ]; then
		echo -ne "homer scripts for REGISTER not running"
		exit 1
	fi

	echo -ne "Starting $DESC: $NAME\n"
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
		--exec $DAEMON -- $OPTIONS || echo -n " already running"
	echo "."
	;;
  stop)
	echo -ne "Stopping $DESC: $NAME\n"
	start-stop-daemon --oknodo --stop --quiet --pidfile $PIDFILE \
		--exec $DAEMON
	echo "."
	;;
  restart|force-reload)
	check_kamailio_config
	create_radius_seqfile

	if [ ! -f $HOMER_SCRIPTS_INV_LOCK ]; then
		echo -ne "homer scripts for INVITE not running"
		exit 1
	fi


	if [ ! -f $HOMER_SCRIPTS_REG_LOCK ]; then
		echo -ne "homer scripts for REGISTER not running"
		exit 1
	fi

	if [ -f $LOCK ]
	then
		echo "$LOCK exists, sp-voipchecker in progress. Wait and try again later."
		exit 1;
	fi
	
	echo $$ > $LOCK
	echo -ne "Restarting $DESC: $NAME\n"
	start-stop-daemon --oknodo --stop --quiet --pidfile \
		$PIDFILE --exec $DAEMON
	sleep 1
	start-stop-daemon --start --quiet --pidfile \
		$PIDFILE --exec $DAEMON  -- $OPTIONS
	echo "."
	rm -f $LOCK
	;;
  status)
	echo -n "Status of $DESC: "
	
	if [ ! -r "$PIDFILE" ]; then
		echo "$NAME is not running."
		exit 3
	fi
	
	if read pid < "$PIDFILE" && ps -p "$pid" > /dev/null 2>&1; then
		echo "$NAME is running."
		exit 0
	else
		echo "$NAME is not running but $PIDFILE exists."
		exit 1
	fi
	;;
  *)
	N=/etc/init.d/ui-$NAME
	echo "Usage: $N {start|stop|restart|force-reload|status|debug}" >&2
	exit 1
	;;
esac

exit 0
