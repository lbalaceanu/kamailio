#! /bin/sh /usr/share/dpatch/dpatch-run
## debugger_dbg_sip_msg.dpatch by  <miti@dell>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' ui-siprouter~/dprint.h ui-siprouter/dprint.h
--- ui-siprouter~/dprint.h	2016-01-15 12:43:31.000000000 +0200
+++ ui-siprouter/dprint.h	2016-01-15 12:43:31.000000000 +0200
@@ -97,6 +97,9 @@
 #define L_INFO   	2
 #define L_DBG    	3
 #define L_MAX    	3
+#define L_OFFSET   42 /* needs to be added and then substracted
+                        because L_WARN may be confused with NULL pointer
+                        (e.g. fixup_dbg_sip_msg) */
 
 /** @brief This is the facility value used to indicate that the caller of the macro
  * did not override the facility. Value 0 (the defaul) is LOG_KERN on Linux
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' ui-siprouter~/modules/debugger/debugger_mod.c ui-siprouter/modules/debugger/debugger_mod.c
--- ui-siprouter~/modules/debugger/debugger_mod.c	2016-01-15 12:43:31.000000000 +0200
+++ ui-siprouter/modules/debugger/debugger_mod.c	2016-01-15 12:48:05.953930639 +0200
@@ -34,6 +34,7 @@
 #include "../../parser/parse_param.h"
 #include "../../shm_init.h"
 #include "../../script_cb.h"
+#include "../../msg_translator.h"
 
 #include "debugger_api.h"
 #include "debugger_config.h"
@@ -51,6 +52,12 @@
 static int fixup_dbg_pv_dump(void** param, int param_no);
 static int w_dbg_dump(struct sip_msg* msg, char* mask, char* level);
 
+static struct action *dbg_fixup_get_action(void **param, int param_no);
+static int fixup_dbg_sip_msg(void** param, int param_no);
+static int w_dbg_sip_msg(struct sip_msg* msg, char *level, char *facility);
+
+extern char* dump_lump_list(struct lump *list, int s_offset, char *s_buf);
+
 /* parameters */
 extern int _dbg_cfgtrace;
 extern int _dbg_cfgpkgcheck;
@@ -62,6 +69,7 @@
 extern int _dbg_step_loops;
 extern int _dbg_reset_msgid;
 
+static int _dbg_sip_msg_cline;
 static char * _dbg_cfgtrace_facility_str = 0;
 static int _dbg_log_assign = 0;
 
@@ -74,6 +82,12 @@
 		fixup_dbg_pv_dump, 0, ANY_ROUTE},
 	{"dbg_pv_dump", (cmd_function)w_dbg_dump, 2,
 		fixup_dbg_pv_dump, 0, ANY_ROUTE},
+	{"dbg_sip_msg", (cmd_function)w_dbg_sip_msg, 0,
+		fixup_dbg_sip_msg, 0, REQUEST_ROUTE|ONREPLY_ROUTE},
+	{"dbg_sip_msg", (cmd_function)w_dbg_sip_msg, 1,
+		fixup_dbg_sip_msg, 0, REQUEST_ROUTE|ONREPLY_ROUTE},
+	{"dbg_sip_msg", (cmd_function)w_dbg_sip_msg, 2,
+		fixup_dbg_sip_msg, 0, REQUEST_ROUTE|ONREPLY_ROUTE},
 	{0, 0, 0, 0, 0, 0}
 };
 
@@ -326,3 +340,164 @@
 
 }
 
+
+static int fixup_dbg_sip_msg(void** param, int param_no)
+{
+	int facility;
+	int level;
+	struct action *dbg_sip_msg_action;
+
+	LM_DBG("dbg_sip_msg() called with %d params\n", param_no);
+
+	switch(param_no)
+	{
+		case 2:
+			facility = str2facility((char*)*(param));
+			if (facility == -1) {
+				LM_ERR("invalid log facility configured");
+				return E_UNSPEC;
+			}
+
+			*param = (void*)(long)facility;
+			break;
+
+		case 1:
+			switch(((char*)(*param))[2])
+			{
+				/* add L_OFFSET because L_WARN is consdered null pointer */
+				case 'A': level = L_ALERT + L_OFFSET; break;
+				case 'B': level = L_BUG + L_OFFSET; break;
+				case 'C': level = L_CRIT2 + L_OFFSET; break;
+				case 'E': level = L_ERR + L_OFFSET; break;
+				case 'W': level = L_WARN + L_OFFSET; break;
+				case 'N': level = L_NOTICE + L_OFFSET; break;
+				case 'I': level = L_INFO + L_OFFSET; break;
+				case 'D': level = L_DBG + L_OFFSET; break;
+				default:
+					LM_ERR("unknown log level\n");
+					return E_UNSPEC;
+			}
+
+			*param = (void*)(long)level;
+			break;
+
+		case 0:
+			_dbg_sip_msg_cline = -1;
+			return 0;
+
+		default:
+			// should not reach here
+			_dbg_sip_msg_cline = -1;
+			return -1;
+	}
+
+	/* save the config line where this config function was called */
+	dbg_sip_msg_action = dbg_fixup_get_action(param, param_no);
+	_dbg_sip_msg_cline = dbg_sip_msg_action->cline;
+
+	return 0;
+}
+
+/**
+  * dump current SIP message and a diff lump list
+  * part of the code taken from msg_apply_changes_f
+  */
+static int w_dbg_sip_msg(struct sip_msg* msg, char *level, char *facility)
+{
+	int ilevel = cfg_get(core, core_cfg, debug);
+	int ifacility= cfg_get(core, core_cfg, log_facility);
+	int flag = FLAG_MSG_LUMPS_ONLY; // copy lumps only, not the whole message
+	unsigned int new_buf_offs=0, orig_offs = 0;
+	char *hdr_lumps = NULL;
+	char *bdy_lumps = NULL;
+	const char *start_txt = "------------------------- START OF SIP message debug --------------------------\n";
+	const char *hdr_txt =   "------------------------------ SIP header diffs -------------------------------\n";
+	const char *bdy_txt =   "------------------------------- SIP body diffs --------------------------------\n";
+	const char *end_txt =   "-------------------------- END OF SIP message debug ---------------------------\n\n";
+	struct dest_info send_info;
+	str obuf;
+
+	if (msg->first_line.type != SIP_REPLY && get_route_type() != REQUEST_ROUTE) {
+		LM_ERR("invalid usage - not in request route\n");
+		return -1;
+	}
+
+	if (level != NULL) {
+		/* substract L_OFFSET previously added */
+		ilevel = (int)(long)level - L_OFFSET;
+	}
+
+	if (facility != NULL) {
+		ifacility = (int)(long)facility;
+	}
+
+	/* msg_apply_changes_f code needed to get the current msg */
+	init_dest_info(&send_info);
+	send_info.proto = PROTO_UDP;
+	if(msg->first_line.type == SIP_REPLY) {
+		obuf.s = generate_res_buf_from_sip_res(msg,
+				(unsigned int*)&obuf.len, BUILD_NO_VIA1_UPDATE);
+	} else {
+		obuf.s = build_req_buf_from_sip_req(msg,
+				(unsigned int*)&obuf.len, &send_info,
+				BUILD_NO_PATH|BUILD_NO_LOCAL_VIA|BUILD_NO_VIA1_UPDATE);
+	}
+
+	if(obuf.s == NULL)
+	{
+		LM_ERR("couldn't update msg buffer content\n");
+		return -1;
+	}
+
+	if(obuf.len >= BUF_SIZE)
+	{
+		LM_ERR("new buffer overflow (%d)\n", obuf.len);
+		pkg_free(obuf.s);
+		return -1;
+	}
+
+	/* skip original uri */
+	if (msg->new_uri.s){
+		orig_offs=msg->first_line.u.request.uri.s - msg->buf;
+		orig_offs=msg->first_line.u.request.uri.len;
+	}
+
+	/* alloc private mem and copy lumps */
+	hdr_lumps = pkg_malloc(BUF_SIZE);
+	bdy_lumps = pkg_malloc(BUF_SIZE);
+
+	new_buf_offs = 0;
+	process_lumps(msg, msg->add_rm, hdr_lumps, &new_buf_offs, &orig_offs, &send_info, flag);
+
+	new_buf_offs = 0;
+	process_lumps(msg, msg->body_lumps, bdy_lumps, &new_buf_offs, &orig_offs, &send_info, flag);
+
+	/* do the print */
+	if (_dbg_sip_msg_cline < 0 ) {
+		LOG_FC(ifacility, ilevel, "CONFIG LINE unknown\n%s%.*s%s%s%s%s%s",
+			start_txt,
+			obuf.len, obuf.s,
+			hdr_txt, hdr_lumps,
+			bdy_txt, bdy_lumps,
+			end_txt);
+	} else {
+		LOG_FC(ifacility, ilevel, "CONFIG LINE %d\n%s%.*s%s%s%s%s%s",
+			_dbg_sip_msg_cline,
+			start_txt,
+			obuf.len, obuf.s,
+			hdr_txt, hdr_lumps,
+			bdy_txt, bdy_lumps,
+			end_txt);
+	}
+
+	/* free lumps */
+	if (hdr_lumps) {
+		pkg_free(hdr_lumps);
+	}
+
+	if (bdy_lumps) {
+		pkg_free(bdy_lumps);
+	}
+
+	return 1;
+}
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' ui-siprouter~/msg_translator.c ui-siprouter/msg_translator.c
--- ui-siprouter~/msg_translator.c	2016-01-15 12:43:29.000000000 +0200
+++ ui-siprouter/msg_translator.c	2016-01-15 12:43:31.000000000 +0200
@@ -952,12 +952,13 @@
 /* another helper functions, adds/Removes the lump,
 	code moved form build_req_from_req  */
 
-static inline void process_lumps(	struct sip_msg* msg,
-					                                struct lump* lumps,
-									char* new_buf,
-									unsigned int* new_buf_offs,
-									unsigned int* orig_offs,
-									struct dest_info* send_info)
+void process_lumps( struct sip_msg* msg,
+                    struct lump* lumps,
+                    char* new_buf,
+                    unsigned int* new_buf_offs,
+                    unsigned int* orig_offs,
+                    struct dest_info* send_info,
+                    int flag)
 {
 	struct lump *t;
 	struct lump *r;
@@ -1432,11 +1433,21 @@
 					break;
 				}
 				size=t->u.offset-s_offset;
-				if (size){
+                if (size > 0 && flag == FLAG_MSG_ALL){
 					memcpy(new_buf+offset, orig+s_offset,size);
 					offset+=size;
 					s_offset+=size;
-				}
+                } else if (flag == FLAG_MSG_LUMPS_ONLY) {
+                    /* do not copy the whole message, jump to the lumps offs */
+                    s_offset+=size;
+                }
+
+                /* the LUMP_DELs are printed with "- " before them */
+                if (t->op==LUMP_DEL && flag == FLAG_MSG_LUMPS_ONLY) {
+                    new_buf[offset++] = '-';
+                    new_buf[offset++] = ' ';
+                }
+
 				/* process before  */
 				for(r=t->before;r;r=r->before){
 					switch (r->op){
@@ -1461,11 +1472,22 @@
 					}
 				}
 skip_nop_before:
-				/* process main (del only) */
-				if (t->op==LUMP_DEL){
-					/* skip len bytes from orig msg */
-					s_offset+=t->len;
-				}
+                /* process main (del only) */
+                if (t->op==LUMP_DEL && flag == FLAG_MSG_ALL){
+                    /* skip len bytes from orig msg */
+                    s_offset+=t->len;
+                } else if (t->op==LUMP_DEL && flag == FLAG_MSG_LUMPS_ONLY) {
+                    /* copy lump value and indent as necessarely */
+                    memcpy(new_buf+offset, orig + t->u.offset, t->len);
+                    offset+=t->len;
+                    if (new_buf[offset-1] != '\n') {
+                        new_buf[offset] = '\n';
+                        offset+=1;
+                    }
+                    /* skip len bytes from orig msg */
+                    s_offset+=t->len;
+                 }
+
 				/* process after */
 				for(r=t->after;r;r=r->after){
 					switch (r->op){
@@ -1498,6 +1520,11 @@
 	}
 	*new_buf_offs=offset;
 	*orig_offs=s_offset;
+
+    /* add '\0' to char* lump list to print it smoothly */
+    if (flag == FLAG_MSG_LUMPS_ONLY) {
+        new_buf[offset] = '\0';
+    }
 #undef RCVCOMP_PARAM_ADD 
 #undef SENDCOMP_PARAM_ADD
 }
@@ -1932,8 +1959,8 @@
 	}
 	new_buf[new_len]=0;
 	/* copy msg adding/removing lumps */
-	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, send_info);
-	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset,send_info);
+	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, send_info, FLAG_MSG_ALL);
+	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset,send_info, FLAG_MSG_ALL);
 	/* copy the rest of the message */
 	memcpy(new_buf+offset, buf+s_offset, len-s_offset);
 	new_buf[new_len]=0;
@@ -2028,8 +2055,8 @@
 	new_buf[new_len]=0; /* debug: print the message */
 	offset=s_offset=0;
 	/*FIXME: no send sock*/
-	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, 0);/*FIXME:*/
-	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset, 0);
+	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, 0, FLAG_MSG_ALL);/*FIXME:*/
+	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset, 0, FLAG_MSG_ALL);
 	/* copy the rest of the message */
 	memcpy(new_buf+offset,
 		buf+s_offset,
@@ -2706,7 +2733,7 @@
 	offset = 0;
 
 	/* copy message lumps */
-	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, send_info);
+	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, send_info, FLAG_MSG_ALL);
 	/* copy the rest of the message without body */
 	if (len > s_offset) {
 		memcpy(new_buf+offset, buf+s_offset, len-s_offset);
@@ -2756,7 +2783,7 @@
 	offset = 0;
 
 	/* copy body lumps */
-	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset, send_info);
+	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset, send_info, FLAG_MSG_ALL);
 	/* copy the rest of the message without body */
 	if (len > s_offset) {
 		memcpy(new_buf+offset, buf+s_offset, len-s_offset);
@@ -2817,9 +2844,9 @@
 	offset = s_offset = 0;
 
 	/* copy message lumps */
-	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, send_info);
+	process_lumps(msg, msg->add_rm, new_buf, &offset, &s_offset, send_info, FLAG_MSG_ALL);
 	/* copy body lumps */
-	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset, send_info);
+	process_lumps(msg, msg->body_lumps, new_buf, &offset, &s_offset, send_info, FLAG_MSG_ALL);
 	/* copy the rest of the message */
 	memcpy(new_buf+offset, buf+s_offset, len-s_offset);
 	offset += (len-s_offset);
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' ui-siprouter~/msg_translator.h ui-siprouter/msg_translator.h
--- ui-siprouter~/msg_translator.h	2016-01-15 12:43:29.000000000 +0200
+++ ui-siprouter/msg_translator.h	2016-01-15 12:43:31.000000000 +0200
@@ -37,6 +37,10 @@
 #ifndef  _MSG_TRANSLATOR_H
 #define _MSG_TRANSLATOR_H
 
+/* flags used for process_lumps flag parameter */
+#define FLAG_MSG_LUMPS_ONLY     0   /* copy just the lumps */
+#define FLAG_MSG_ALL            1   /* copy all the msg */
+
 #define MY_HF_SEP ": "
 #define MY_HF_SEP_LEN 2
 
@@ -166,4 +170,16 @@
 
 int build_sip_msg_from_buf(struct sip_msg *msg, char *buf, int len,
 		unsigned int id);
+
+/* process the lumps of a sip msg
+ * flags =  => add also the existing header to new_buf
+ * flags =  => add only the lumps (unapplied info) to new_buf
+ **/
+void process_lumps( struct sip_msg* msg,
+                    struct lump* lumps,
+                    char* new_buf,
+                    unsigned int* new_buf_offs,
+                    unsigned int* orig_offs,
+                    struct dest_info* send_info,
+                    int flag);
 #endif
