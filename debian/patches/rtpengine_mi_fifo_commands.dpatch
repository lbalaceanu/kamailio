#! /bin/sh /usr/share/dpatch/dpatch-run
## rtpengine_mi_fifo_commands.dpatch by  <miti@dell>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' ui-siprouter~/modules/rtpengine/rtpengine.c ui-siprouter/modules/rtpengine/rtpengine.c
--- ui-siprouter~/modules/rtpengine/rtpengine.c	2015-06-12 11:32:33.000000000 +0300
+++ ui-siprouter/modules/rtpengine/rtpengine.c	2015-06-12 11:32:51.227636223 +0300
@@ -245,20 +245,25 @@
 #define MI_SET_NATPING_STATE		"nh_enable_ping"
 #define MI_DEFAULT_NATPING_STATE	1
 
-#define MI_ENABLE_RTP_PROXY			"nh_enable_rtpp"
 #define MI_MIN_RECHECK_TICKS		0
 #define MI_MAX_RECHECK_TICKS		(unsigned int)-1
 
+#define MI_ENABLE_RTP_PROXY			"nh_enable_rtpp"
 #define MI_SHOW_RTP_PROXIES			"nh_show_rtpp"
+#define MI_PING_RTP_PROXY           "nh_ping_rtpp"
 
 #define MI_RTP_PROXY_NOT_FOUND		"RTP proxy not found"
 #define MI_RTP_PROXY_NOT_FOUND_LEN	(sizeof(MI_RTP_PROXY_NOT_FOUND)-1)
 #define MI_PING_DISABLED			"NATping disabled from script"
 #define MI_PING_DISABLED_LEN		(sizeof(MI_PING_DISABLED)-1)
+#define MI_DISABLED_PERMANENT        "1 (permanent)"
+#define MI_DISABLED_PERMANENT_LEN    (sizeof(MI_DISABLED_PERMANENT)-1)
 #define MI_SET						"set"
 #define MI_SET_LEN					(sizeof(MI_SET)-1)
 #define MI_INDEX					"index"
 #define MI_INDEX_LEN				(sizeof(MI_INDEX)-1)
+#define MI_ENABLED					"enabled"
+#define MI_ENABLED_LEN				(sizeof(MI_ENABLED)-1)
 #define MI_DISABLED					"disabled"
 #define MI_DISABLED_LEN				(sizeof(MI_DISABLED)-1)
 #define MI_WEIGHT					"weight"
@@ -266,6 +271,24 @@
 #define MI_RECHECK_TICKS			"recheck_ticks"
 #define MI_RECHECK_T_LEN			(sizeof(MI_RECHECK_TICKS)-1)
 
+#define MI_ERROR                    "Error when adding rtpp node details"
+#define MI_ERROR_LEN                (sizeof(MI_ERROR)-1)
+#define MI_ALL                      "all"
+#define MI_ALL_LEN           		(sizeof(MI_ALL)-1)
+#define MI_ENABLE                   "enable"
+#define MI_ENABLE_LEN         		(sizeof(MI_ENABLE)-1)
+#define MI_DISABLE                  "disable"
+#define MI_DISABLE_LEN         		(sizeof(MI_DISABLE)-1)
+#define MI_PING                     "ping"
+#define MI_PING_LEN         		(sizeof(MI_PING)-1)
+#define MI_SUCCESS                  "success"
+#define MI_SUCCESS_LEN         		(sizeof(MI_SUCCESS)-1)
+#define MI_FAIL                     "fail"
+#define MI_FAIL_LEN         		(sizeof(MI_FAIL)-1)
+
+#define MI_FOUND_ALL                   2
+#define MI_FOUND_ONE                   1
+#define MI_FOUND_NONE                  0
 
 
 #define	CPORT		"22222"
@@ -276,6 +299,7 @@
 	OP_DELETE,
 	OP_START_RECORDING,
 	OP_QUERY,
+	OP_PING,
 };
 
 struct ng_flags_parse {
@@ -289,6 +313,7 @@
 	[OP_DELETE]		= "delete",
 	[OP_START_RECORDING]	= "start recording",
 	[OP_QUERY]		= "query",
+	[OP_PING]		= "ping",
 };
 
 static char *gencookie();
@@ -316,14 +341,22 @@
 static int child_init(int);
 static void mod_destroy(void);
 
+static int add_rtpp_node_info(struct mi_node *node,
+                              struct rtpp_node *crt_rtpp,
+                              struct rtpp_set *rtpp_list);
+
+static int rtpp_test_ping(struct rtpp_node *node);
+
 /* Pseudo-Variables */
 static int pv_get_rtpstat_f(struct sip_msg *, pv_param_t *, pv_value_t *);
 
 /*mi commands*/
 static struct mi_root* mi_enable_rtp_proxy(struct mi_root* cmd_tree,
 		void* param );
-static struct mi_root* mi_show_rtpproxies(struct mi_root* cmd_tree,
+static struct mi_root* mi_show_rtp_proxy(struct mi_root* cmd_tree,
 		void* param);
+static struct mi_root* mi_ping_rtp_proxy(struct mi_root* cmd_tree,
+        void* param);
 
 
 static int rtpengine_disable_tout = 60;
@@ -425,8 +458,9 @@
 };
 
 static mi_export_t mi_cmds[] = {
-	{MI_ENABLE_RTP_PROXY,     mi_enable_rtp_proxy,  0,                0, 0},
-	{MI_SHOW_RTP_PROXIES,     mi_show_rtpproxies,   MI_NO_INPUT_FLAG, 0, 0},
+	{MI_ENABLE_RTP_PROXY,     mi_enable_rtp_proxy,  0,  0,  0},
+	{MI_SHOW_RTP_PROXIES,     mi_show_rtp_proxy,    0,  0,  0},
+	{MI_PING_RTP_PROXY,       mi_ping_rtp_proxy,    0,  0,  0},
 	{ 0, 0, 0, 0, 0}
 };
 
@@ -768,67 +802,204 @@
 	return 0;
 }
 
-static struct mi_root* mi_enable_rtp_proxy(struct mi_root* cmd_tree,
-												void* param )
-{	struct mi_node* node;
-	str rtpp_url;
+static int rtpp_test_ping(struct rtpp_node *node)
+{
+    bencode_buffer_t bencbuf;
+    bencode_item_t *dict;
+    char *cp;
+    int ret;
+
+    if (bencode_buffer_init(&bencbuf)) {
+        return -1;
+    }
+    dict = bencode_dictionary(&bencbuf);
+    bencode_dictionary_add_string(dict, "command", command_strings[OP_PING]);
+
+    if (bencbuf.error) {
+        goto error;
+    }
+
+    cp = send_rtpp_command(node, dict, &ret);
+    if (!cp) {
+        goto error;
+    }
+
+    dict = bencode_decode_expect(&bencbuf, cp, ret, BENCODE_DICTIONARY);
+    if (!dict || bencode_dictionary_get_strcmp(dict, "result", "pong")) {
+        goto error;
+    }
+
+    bencode_buffer_free(&bencbuf);
+    return 0;
+
+error:
+    bencode_buffer_free(&bencbuf);
+    return -1;
+}
+
+static struct mi_root* mi_enable_rtp_proxy(struct mi_root *cmd_tree,
+												void *param )
+{
+	struct mi_node *node, *crt_node;
+	struct rtpp_set *rtpp_list;
+	struct rtpp_node *crt_rtpp, *found_rtpp;
+	struct mi_root *root = NULL;
+	struct mi_attr *attr;
 	unsigned int enable;
-	struct rtpp_set * rtpp_list;
-	struct rtpp_node * crt_rtpp;
-	int found;
+	int found, found_rtpp_disabled;
+	str rtpp_url;
+	str snode, sattr, svalue;
 
-	found = 0;
+	found = MI_FOUND_NONE;
+	found_rtpp_disabled = 0;
+	found_rtpp = NULL;
+	enable = 0;
 
-	if(rtpp_set_list ==NULL)
-		goto end;
+	if (rtpp_set_list == NULL) {
+	    return init_mi_tree(404, MI_RTP_PROXY_NOT_FOUND, MI_RTP_PROXY_NOT_FOUND_LEN);
+	}
 
 	node = cmd_tree->node.kids;
-	if(node == NULL)
-		return init_mi_tree( 400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	if (node == NULL) {
+		return init_mi_tree(400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	}
 
-	if(node->value.s == NULL || node->value.len ==0)
-		return init_mi_tree( 400, MI_BAD_PARM_S, MI_BAD_PARM_LEN);
+	if (node->value.s == NULL || node->value.len ==0) {
+		return init_mi_tree(400, MI_BAD_PARM_S, MI_BAD_PARM_LEN);
+	}
 
+	/* get proxy */
 	rtpp_url = node->value;
 
 	node = node->next;
-	if(node == NULL)
-		return init_mi_tree( 400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	if (node == NULL) {
+		return init_mi_tree(400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	}
 
-	enable = 0;
-	if( strno2int( &node->value, &enable) <0)
+	if (node->value.s == NULL || node->value.len ==0) {
+		return init_mi_tree(400, MI_BAD_PARM_S, MI_BAD_PARM_LEN);
+	}
+
+	/* get value (enable/disable) */
+	if(strno2int(&node->value, &enable) < 0) {
 		goto error;
+	}
+
+	node = node->next;
+	if (node != NULL) {
+		return init_mi_tree(400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	}
+
+    /* found a matching all - show all rtpp */
+    if (strncmp(MI_ALL, rtpp_url.s, MI_ALL_LEN) == 0) {
+        found = MI_FOUND_ALL;
+    }
 
 	for(rtpp_list = rtpp_set_list->rset_first; rtpp_list != NULL;
-					rtpp_list = rtpp_list->rset_next){
+					rtpp_list = rtpp_list->rset_next) {
 
 		for(crt_rtpp = rtpp_list->rn_first; crt_rtpp != NULL;
-						crt_rtpp = crt_rtpp->rn_next){
-			/*found a matching rtpp*/
+						crt_rtpp = crt_rtpp->rn_next) {
 
-			if(crt_rtpp->rn_url.len == rtpp_url.len){
+	        /* found a matching rtpp - show it */
+	        if (found == MI_FOUND_ALL ||
+                    (crt_rtpp->rn_url.len == rtpp_url.len &&
+	                strncmp(crt_rtpp->rn_url.s, rtpp_url.s, rtpp_url.len) == 0)) {
+	            /* do ping when try to enable the rtpp */
+	            if (enable) {
 
-				if(strncmp(crt_rtpp->rn_url.s, rtpp_url.s, rtpp_url.len) == 0){
-					/*set the enabled/disabled status*/
-					found = 1;
-					crt_rtpp->rn_recheck_ticks =
-						enable? MI_MIN_RECHECK_TICKS : MI_MAX_RECHECK_TICKS;
-					crt_rtpp->rn_disabled = enable?0:1;
-				}
-			}
+	                /* if ping success, enable the rtpp and reset ticks */
+	                if (rtpp_test_ping(crt_rtpp) == 0) {
+					    crt_rtpp->rn_disabled = 0;
+	                    crt_rtpp->rn_recheck_ticks = MI_MIN_RECHECK_TICKS;
+
+	                /* if ping fail, disable the rtpps but _not_ permanently*/
+	                } else {
+	                    crt_rtpp->rn_recheck_ticks = get_ticks() + rtpengine_disable_tout;
+					    crt_rtpp->rn_disabled = 1;
+	                    found_rtpp_disabled = 1;
+	                }
+
+	            /* do not ping when disable the rtpp; disable it permanenty */
+	            } else {
+					crt_rtpp->rn_disabled = 1;
+	                crt_rtpp->rn_recheck_ticks = MI_MAX_RECHECK_TICKS;
+	            }
+
+                if (found == MI_FOUND_NONE) {
+                        found = MI_FOUND_ONE;
+                        found_rtpp = crt_rtpp;
+                }
+	        }
 		}
 	}
 
-end:
-	if(found)
-		return init_mi_tree( 200, MI_OK_S, MI_OK_LEN);
-	return init_mi_tree(404,MI_RTP_PROXY_NOT_FOUND,MI_RTP_PROXY_NOT_FOUND_LEN);
+	root = init_mi_tree(200, MI_OK_S, MI_OK_LEN);
+	if (!root) {
+		LM_ERR("the MI tree cannot be initialized!\n");
+		return 0;
+	}
+	node = &root->node;
+
+	switch (found) {
+	    case MI_FOUND_ALL:
+	        snode.s = MI_ALL;
+	        snode.len = MI_ALL_LEN;
+            break;
+	    case MI_FOUND_ONE:
+	        snode.s = found_rtpp->rn_url.s;
+	        snode.len = found_rtpp->rn_url.len;
+	        break;
+	    default:
+	        if (root) {
+	            free_mi_tree(root);
+	        }
+	        return init_mi_tree(404, MI_RTP_PROXY_NOT_FOUND, MI_RTP_PROXY_NOT_FOUND_LEN);
+	}
+
+    svalue.s = MI_SUCCESS;
+    svalue.len = MI_SUCCESS_LEN;
+
+    if (enable) {
+        sattr.s = MI_ENABLE;
+        sattr.len = MI_ENABLE_LEN;
+
+        if (found_rtpp_disabled) {
+            svalue.s = MI_FAIL;
+            svalue.len = MI_FAIL_LEN;
+        }
+    } else {
+        sattr.s = MI_DISABLE;
+        sattr.len = MI_DISABLE_LEN;
+    }
+
+	if (!(crt_node = add_mi_node_child(node, 0,
+	                                   snode.s, snode.len,
+	                                   0, 0)) ) {
+	    LM_ERR("cannot add the child node to the tree\n");
+	    goto error;
+	}
+
+	if ((attr = add_mi_attr(crt_node, MI_DUP_VALUE,
+	                        sattr.s, sattr.len,
+	                        svalue.s, svalue.len)) == 0) {
+	    LM_ERR("cannot add attributes to the node\n");
+	    goto error;
+	}
+
+
+	return root;
+
 error:
-	return init_mi_tree( 400, MI_BAD_PARM_S, MI_BAD_PARM_LEN);
+	if (root) {
+	    free_mi_tree(root);
+	}
+	return init_mi_tree(404, MI_ERROR, MI_ERROR_LEN);
 }
 
 
 
+
 #define add_rtpp_node_int_info(_parent, _name, _name_len, _value, _child,\
 								_len, _string, _error)\
 	do {\
@@ -842,74 +1013,293 @@
 			goto _error;\
 	}while(0);
 
-static struct mi_root* mi_show_rtpproxies(struct mi_root* cmd_tree,
-												void* param)
+
+static int add_rtpp_node_info (struct mi_node *node,
+	                           struct rtpp_node *crt_rtpp,
+	                           struct rtpp_set *rtpp_list)
 {
-	struct mi_node* node, *crt_node, *child;
-	struct mi_root* root;
-	struct mi_attr * attr;
-	struct rtpp_set * rtpp_list;
-	struct rtpp_node * crt_rtpp;
-	char * string, *id;
 	int id_len, len;
+    int rtpp_ticks;
+	struct mi_node *crt_node, *child;
+	struct mi_attr *attr;
+	char *string, *id;
 
 	string = id = 0;
 
+	id = int2str(rtpp_list->id_set, &id_len);
+	if(!id) {
+	    LM_ERR("cannot convert set id\n");
+	    goto error;
+	}
+
+	if(!(crt_node = add_mi_node_child(node, 0, crt_rtpp->rn_url.s,
+	        crt_rtpp->rn_url.len, 0,0)) ) {
+	    LM_ERR("cannot add the child node to the tree\n");
+	    goto error;
+	}
+
+	LM_DBG("adding node name %s \n",crt_rtpp->rn_url.s );
+
+	if((attr = add_mi_attr(crt_node, MI_DUP_VALUE, MI_SET, MI_SET_LEN,
+	                        id, id_len))== 0) {
+	    LM_ERR("cannot add attributes to the node\n");
+	    goto error;
+	}
+
+	add_rtpp_node_int_info(crt_node, MI_INDEX, MI_INDEX_LEN,
+	    crt_rtpp->idx, child, len, string, error);
+
+	if ((1 == crt_rtpp->rn_disabled ) && (crt_rtpp->rn_recheck_ticks == MI_MAX_RECHECK_TICKS)) {
+	    if( !(child = add_mi_node_child(crt_node, MI_DUP_VALUE, MI_DISABLED, MI_DISABLED_LEN,
+	                    MI_DISABLED_PERMANENT, MI_DISABLED_PERMANENT_LEN))) {
+	        LM_ERR("cannot add disabled (permanent) message\n");
+	        goto error;
+	    }
+	}
+	else {
+	    add_rtpp_node_int_info(crt_node, MI_DISABLED, MI_DISABLED_LEN,
+	        crt_rtpp->rn_disabled, child, len, string, error);
+	}
+
+	add_rtpp_node_int_info(crt_node, MI_WEIGHT, MI_WEIGHT_LEN,
+	    crt_rtpp->rn_weight, child, len, string, error);
+
+	if (crt_rtpp->rn_recheck_ticks == MI_MAX_RECHECK_TICKS) {
+	    if( !(child = add_mi_node_child(crt_node, MI_DUP_VALUE,
+	                  MI_RECHECK_TICKS, MI_RECHECK_T_LEN,
+	                  "N/A", sizeof("N/A") - 1))) {
+	        LM_ERR("cannot add MAX recheck_ticks value\n");
+	        goto error;
+	    }
+	} else {
+        rtpp_ticks = crt_rtpp->rn_recheck_ticks - get_ticks();
+        rtpp_ticks = rtpp_ticks < 0 ? 0 : rtpp_ticks;
+	    add_rtpp_node_int_info(crt_node, MI_RECHECK_TICKS, MI_RECHECK_T_LEN,
+	        rtpp_ticks, child, len, string, error);
+	}
+
+	return 0;
+
+error:
+	return -1;
+}
+
+static struct mi_root* mi_show_rtp_proxy(struct mi_root* cmd_tree,
+												void* param)
+{
+	struct mi_node *node;
+	struct mi_root *root = NULL;
+	struct rtpp_set *rtpp_list;
+	struct rtpp_node *crt_rtpp;
+	int found;
+	str rtpp_url;
+
+	found = MI_FOUND_NONE;
+
+	if (rtpp_set_list == NULL) {
+	    return init_mi_tree(404, MI_RTP_PROXY_NOT_FOUND, MI_RTP_PROXY_NOT_FOUND_LEN);
+	}
+
+	node = cmd_tree->node.kids;
+	if (node == NULL) {
+		return init_mi_tree( 400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	}
+
+	if (node->value.s == NULL || node->value.len ==0) {
+		return init_mi_tree( 400, MI_BAD_PARM_S, MI_BAD_PARM_LEN);
+	}
+
+	rtpp_url = node->value;
+	if (strncmp(MI_ALL, rtpp_url.s, MI_ALL_LEN) != 0 && rtpp_set_list == NULL) {
+	    return init_mi_tree(404, MI_RTP_PROXY_NOT_FOUND, MI_RTP_PROXY_NOT_FOUND_LEN);
+	}
+
+	node = node->next;
+	if (node != NULL) {
+		return init_mi_tree( 400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	}
+
 	root = init_mi_tree(200, MI_OK_S, MI_OK_LEN);
 	if (!root) {
 		LM_ERR("the MI tree cannot be initialized!\n");
 		return 0;
 	}
 
-	if(rtpp_set_list ==NULL)
-		return root;
-
 	node = &root->node;
 
+    /* found a matching all - show all rtpp */
+    if (strncmp(MI_ALL, rtpp_url.s, MI_ALL_LEN) == 0) {
+        found = MI_FOUND_ALL;
+    }
+
 	for(rtpp_list = rtpp_set_list->rset_first; rtpp_list != NULL;
-					rtpp_list = rtpp_list->rset_next){
+					rtpp_list = rtpp_list->rset_next) {
 
 		for(crt_rtpp = rtpp_list->rn_first; crt_rtpp != NULL;
-						crt_rtpp = crt_rtpp->rn_next){
-
-			id =  int2str(rtpp_list->id_set, &id_len);
-			if(!id){
-				LM_ERR("cannot convert set id\n");
-				goto error;
-			}
-
-			if(!(crt_node = add_mi_node_child(node, 0, crt_rtpp->rn_url.s,
-					crt_rtpp->rn_url.len, 0,0)) ) {
-				LM_ERR("cannot add the child node to the tree\n");
-				goto error;
-			}
+						crt_rtpp = crt_rtpp->rn_next) {
 
-			LM_DBG("adding node name %s \n",crt_rtpp->rn_url.s );
+	        /* found a matching rtpp - show it */
+	        if (found == MI_FOUND_ALL ||
+                    (crt_rtpp->rn_url.len == rtpp_url.len &&
+	                strncmp(crt_rtpp->rn_url.s, rtpp_url.s, rtpp_url.len) == 0)) {
 
-			if((attr = add_mi_attr(crt_node, MI_DUP_VALUE, MI_SET, MI_SET_LEN,
-									id, id_len))== 0){
-				LM_ERR("cannot add attributes to the node\n");
-				goto error;
-			}
+	            if (add_rtpp_node_info(node, crt_rtpp, rtpp_list) < 0) {
+	                goto error;
+	            }
 
-			add_rtpp_node_int_info(crt_node, MI_INDEX, MI_INDEX_LEN,
-				crt_rtpp->idx, child, len,string,error);
-			add_rtpp_node_int_info(crt_node, MI_DISABLED, MI_DISABLED_LEN,
-				crt_rtpp->rn_disabled, child, len,string,error);
-			add_rtpp_node_int_info(crt_node, MI_WEIGHT, MI_WEIGHT_LEN,
-				crt_rtpp->rn_weight,  child, len, string,error);
-			add_rtpp_node_int_info(crt_node, MI_RECHECK_TICKS,MI_RECHECK_T_LEN,
-				crt_rtpp->rn_recheck_ticks, child, len, string, error);
+                if (found == MI_FOUND_NONE) {
+                        found = MI_FOUND_ONE;
+                }
+	        }
 		}
 	}
 
+	switch (found) {
+	    case MI_FOUND_ALL:
+	    case MI_FOUND_ONE:
+	        break;
+	    default:
+	        if (root) {
+	            free_mi_tree(root);
+	        }
+	        return init_mi_tree(404, MI_RTP_PROXY_NOT_FOUND, MI_RTP_PROXY_NOT_FOUND_LEN);
+	}
+
 	return root;
+
 error:
-	if (root)
+	if (root) {
 		free_mi_tree(root);
-	return 0;
+	}
+	return init_mi_tree(404, MI_ERROR, MI_ERROR_LEN);
 }
 
+static struct mi_root* mi_ping_rtp_proxy(struct mi_root* cmd_tree,
+												void* param)
+{
+	struct mi_node *node, *crt_node;
+	struct mi_attr *attr;
+	struct mi_root *root = NULL;
+	struct rtpp_set *rtpp_list;
+	struct rtpp_node *crt_rtpp, *found_rtpp;
+	int found, found_rtpp_disabled;
+	str rtpp_url;
+	str snode, sattr, svalue;
+
+	found = 0;
+	found_rtpp_disabled = 0;
+	found_rtpp = NULL;
+
+	if (rtpp_set_list == NULL) {
+	    return init_mi_tree(404, MI_RTP_PROXY_NOT_FOUND, MI_RTP_PROXY_NOT_FOUND_LEN);
+	}
+
+	node = cmd_tree->node.kids;
+	if (node == NULL) {
+		return init_mi_tree( 400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	}
+
+	if (node->value.s == NULL || node->value.len ==0) {
+		return init_mi_tree( 400, MI_BAD_PARM_S, MI_BAD_PARM_LEN);
+	}
+
+	rtpp_url = node->value;
+
+	node = node->next;
+	if (node != NULL) {
+		return init_mi_tree( 400, MI_MISSING_PARM_S, MI_MISSING_PARM_LEN);
+	}
+
+    /* found a matching all - ping all rtpp */
+    if (strncmp(MI_ALL, rtpp_url.s, MI_ALL_LEN) == 0) {
+        found = MI_FOUND_ALL;
+    }
+
+	for (rtpp_list = rtpp_set_list->rset_first; rtpp_list != NULL;
+					rtpp_list = rtpp_list->rset_next) {
+
+		for (crt_rtpp = rtpp_list->rn_first; crt_rtpp != NULL;
+						crt_rtpp = crt_rtpp->rn_next) {
+
+	        /* found a matching rtpp - ping it */
+	        if (found == MI_FOUND_ALL ||
+                    (crt_rtpp->rn_url.len == rtpp_url.len &&
+	                strncmp(crt_rtpp->rn_url.s, rtpp_url.s, rtpp_url.len) == 0)) {
+
+	            /* if ping fail */
+	            if (rtpp_test_ping(crt_rtpp) < 0) {
+	                crt_rtpp->rn_recheck_ticks = get_ticks() + rtpengine_disable_tout;
+	                found_rtpp_disabled = 1;
+	                crt_rtpp->rn_disabled = 1;
+	            }
+
+                if (found == MI_FOUND_NONE) {
+    	            found = MI_FOUND_ONE;
+	                found_rtpp = crt_rtpp;
+                }
+		    }
+	    }
+	}
+
+	root = init_mi_tree(200, MI_OK_S, MI_OK_LEN);
+	if (!root) {
+		LM_ERR("the MI tree cannot be initialized!\n");
+		return 0;
+	}
+
+	node = &root->node;
+
+	switch (found) {
+	    case MI_FOUND_ALL:
+	        snode.s = MI_ALL;
+	        snode.len = MI_ALL_LEN;
+	        break;
+	    case MI_FOUND_ONE:
+	        snode.s = found_rtpp->rn_url.s;
+	        snode.len = found_rtpp->rn_url.len;
+	        break;
+	    default:
+	        if (root) {
+	            free_mi_tree(root);
+	        }
+	        return init_mi_tree(404, MI_RTP_PROXY_NOT_FOUND, MI_RTP_PROXY_NOT_FOUND_LEN);
+	}
+
+    sattr.s = MI_PING;
+    sattr.len = MI_PING_LEN;
+
+    if (found_rtpp_disabled) {
+        svalue.s = MI_FAIL;
+        svalue.len = MI_FAIL_LEN;
+    } else {
+        svalue.s = MI_SUCCESS;
+        svalue.len = MI_SUCCESS_LEN;
+    }
+
+	if (!(crt_node = add_mi_node_child(node, 0,
+	                                   snode.s, snode.len,
+	                                   0, 0)) ) {
+	    LM_ERR("cannot add the child node to the tree\n");
+	    goto error;
+	}
+
+	if ((attr = add_mi_attr(crt_node, MI_DUP_VALUE,
+	                        sattr.s, sattr.len,
+	                        svalue.s, svalue.len)) == 0) {
+	    LM_ERR("cannot add attributes to the node\n");
+	    goto error;
+	}
+
+	return root;
+
+error:
+	if (root) {
+	    free_mi_tree(root);
+	}
+	return init_mi_tree(404, MI_ERROR, MI_ERROR_LEN);
+}
+
+
 
 static int
 mod_init(void)
@@ -1444,6 +1834,10 @@
 		}
 
 		cp = send_rtpp_command(node, ng_flags.dict, &ret);
+        if (cp == NULL) {
+    	    node->rn_disabled = 1;
+        	node->rn_recheck_ticks = get_ticks() + rtpengine_disable_tout;
+        }
 	} while (cp == NULL);
 	LM_DBG("proxy reply: %.*s\n", ret, cp);
 
@@ -1533,6 +1927,8 @@
 
 	cp = send_rtpp_command(node, dict, &ret);
 	if (!cp) {
+	    node->rn_disabled = 1;
+    	node->rn_recheck_ticks = get_ticks() + rtpengine_disable_tout;
 		LM_ERR("proxy did not respond to ping\n");
 		goto error;
 	}
@@ -1565,6 +1961,7 @@
 	static char buf[0x10000];
 	struct pollfd fds[1];
 	struct iovec *v;
+    str out = STR_NULL;
 
 	v = bencode_iovec(dict, &vcnt, 1, 0);
 	if (!v) {
@@ -1590,7 +1987,7 @@
 		}
 		if (connect(fd, (struct sockaddr *) &addr, sizeof(addr)) < 0) {
 			close(fd);
-			LM_ERR("can't connect to RTP proxy\n");
+			LM_ERR("can't connect to RTP proxy <%s>\n", node->rn_url.s);
 			goto badproxy;
 		}
 
@@ -1599,7 +1996,7 @@
 		} while (len == -1 && errno == EINTR);
 		if (len <= 0) {
 			close(fd);
-			LM_ERR("can't send command to a RTP proxy\n");
+			LM_ERR("can't send command to RTP proxy <%s>\n", node->rn_url.s);
 			goto badproxy;
 		}
 		do {
@@ -1607,7 +2004,7 @@
 		} while (len == -1 && errno == EINTR);
 		close(fd);
 		if (len <= 0) {
-			LM_ERR("can't read reply from a RTP proxy\n");
+			LM_ERR("can't read reply from RTP proxy <%s>\n", node->rn_url.s);
 			goto badproxy;
 		}
 	} else {
@@ -1627,7 +2024,8 @@
 				len = writev(rtpp_socks[node->idx], v, vcnt + 1);
 			} while (len == -1 && (errno == EINTR || errno == ENOBUFS));
 			if (len <= 0) {
-				LM_ERR("can't send command to a RTP proxy\n");
+                bencode_get_str(bencode_dictionary_get(dict, "command"), &out);
+				LM_ERR("can't send command \"%.*s\" to RTP proxy <%s>\n", out.len, out.s, node->rn_url.s);
 				goto badproxy;
 			}
 			while ((poll(fds, 1, rtpengine_tout * 1000) == 1) &&
@@ -1636,7 +2034,7 @@
 					len = recv(rtpp_socks[node->idx], buf, sizeof(buf)-1, 0);
 				} while (len == -1 && errno == EINTR);
 				if (len <= 0) {
-					LM_ERR("can't read reply from a RTP proxy\n");
+					LM_ERR("can't read reply from RTP proxy <%s>\n", node->rn_url.s);
 					goto badproxy;
 				}
 				if (len >= (v[0].iov_len - 1) &&
@@ -1653,7 +2051,7 @@
 			}
 		}
 		if (i == rtpengine_retr) {
-			LM_ERR("timeout waiting reply from a RTP proxy\n");
+			LM_ERR("timeout waiting reply from RTP proxy <%s>\n", node->rn_url.s);
 			goto badproxy;
 		}
 	}
@@ -1662,11 +2060,8 @@
 	cp[len] = '\0';
 	*outlen = len;
 	return cp;
-badproxy:
-	LM_ERR("proxy <%s> does not respond, disable it\n", node->rn_url.s);
-	node->rn_disabled = 1;
-	node->rn_recheck_ticks = get_ticks() + rtpengine_disable_tout;
 
+badproxy:
 	return NULL;
 }
 
